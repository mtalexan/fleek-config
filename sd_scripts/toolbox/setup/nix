#!/bin/bash

# Sets up nix passthru from the host system for a toolbox/distrobox
#
# Once setup, all the nix tools and home-manager will work from the host,
# any any prompt or anything will function transparently.
# Nix uses cacertificates configured by the daemon, so the nix tools inside
# the toolbox/distrobox will not use the cacerts from within the container
# for the purposes of nix operations.

die() 
{
    [ $# -eq 0 ] || echo >&2 "ERROR: " "$@"
    exit 1
}

# all host files are under this root
readonly hostfs="/run/host"

[ -e $hostfs ] || die "Not in a toolbox/distrobox!"
[ ! -e /nix ] || die "Nix already setup in toolbox/distrobox"

# create a temp file with the fixed block we need to include in some files

tmp_text=$(mktemp) || die "Creating temp file 1"

cat > ${tmp_text} <<EOF

# Nix
if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
    . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi
# End Nix

EOF
[ $? -eq 0 ] || die "Creating file to source nix"

for P in /nix /var/nix-profile /etc/nix /etc/profile.d/nix.sh /etc/sudoers.d/nix-sudo-env; do
    set -x
    sudo ln -s $hostfs$P $P || die "$P symlink"
    set +x
done

tmp_rc=$(mktemp) || die "Creating tempfile 2"


# add the block of text to the top of each of these files, creating them if necessary
for F in /etc/bashrc.bashrc /etc/bashrc /etc/zshrc ; do
    echo "Adding sourcing of nix-daemon.sh to $F"
    cat $tmp_text > $tmp_rc || die "Initially populating replacement for $F"
    if [ -e $F ]; then
        cat $F >> $tmp_rc || die "Adding existing content from $F to replacement"
    fi
    sudo mv $tmp_rc $F || die "Replacing $F"
done

echo "SUCCESS"
echo "Now exit the toolbox and re-enter it to see the effects"

# vim: sw=4:expandtab
